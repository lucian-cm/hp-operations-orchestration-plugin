<!--

- (c) Copyright 2013 Hewlett-Packard Development Company, L.P. 
- Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->
<j:jelly
    xmlns:j="jelly:core"
    xmlns:st="jelly:stapler"
    xmlns:d="jelly:define"
    xmlns:l="/lib/layout"
    xmlns:t="/lib/hudson"
    xmlns:f="/lib/form"
    xmlns:hp="/hp/jelly">


    <!-- TODO: handle case where there are no servers defined... -->
  <j:invokeStatic var="servers" className="com.hp.mercury.ci.jenkins.plugins.oo.core.OOAccessibilityLayer" method="getAvailableServers"/>

  <j:invokeStatic var="buildStepAjaxId" className="com.hp.mercury.ci.jenkins.plugins.oo.utils.UniquenessUtils" method="randomAlphanumeric">
    <j:arg value="12" type="int"/>
  </j:invokeStatic>


  <j:set var="selectedServer" value="${instance.getOOServer()}" defaultValue="${null}"/>

    <!-- don't even think about changing the position of this line somewhere into the javascript... -->
    <st:adjunct assumes="org.kohsuke.stapler.framework.prototype.prototype" includes="org.kohsuke.stapler.bind"/>
    <st:bind var="descriptorProxy" value="${descriptor}"/>

    <!-- set up some javascript functions for linking the selections between elements. -->
    <![CDATA[
      <script language="javascript">

            /*

            because this entire content is sent to the browser for every build step added to the job,
            we risk having multiple duplicate functions variables etc...
            since we are the ones defining cachedServerFlows, we only execute the javascript code if
            cachedServerFlows is not defined.

            */

            if (typeof cachedServerFlows === 'undefined') {

                var cachedServerFlows = new Array();

                window['setVisible'] = function setVisible(id, visibility) {

                    var e = document.getElementById(id);
                    e.style.visibility = visibility ? 'visible' : 'hidden';
                };

                window['clearFlowParameters'] = function clearFlowParameters(buildStepId) {

                      var argsContainer = document.getElementById('argsContainer' + buildStepId);
                      var repeater = argsContainer.firstChild;

                      while (repeater.firstChild.getAttribute("name") === "args") {
                        repeater.removeChild(repeater.firstChild);
                      }
                };

                window['getFlowsForServer'] = function getFlowsForServer(buildStepId, force, serverId, basepath, callback) {

                  if (cachedServerFlows[serverId + basepath] == null || force) {

                        //display ajax delay popup
                        var refreshButton = document.getElementById("refreshButton" + buildStepId);
                        refreshButton.onclick = function() {};
                        var img = refreshButton.childNodes[0];
                        var src = img.src;
                        var fileStartIndex = src.lastIndexOf('/') + 1;
                        img.src = src.substring(0,fileStartIndex) + 'spinner.gif';

                        descriptorProxy.listFlowsForServer(
                          serverId,
                          basepath,
                          function(response) {

                              var flows = response.responseObject();
                              if (flows instanceof Array) {
                                  cachedServerFlows[serverId + basepath] = flows;
                                  callback(buildStepId, cachedServerFlows[serverId + basepath]);
                              }
                              else{
                                    var errorDetails;
                                    if (typeof flows.message === 'undefined') {
                                        errorDetails = response.responseText;
                                    }
                                    else {
                                        errorDetails = flows.message;
                                    }

                                    alert("server failed to return list of flows: " + errorDetails);
                              }

                              //kill ajax "spinner"
                              img.src = src.substring(0,fileStartIndex) + 'refresh.png';
                              refreshButton.onclick = function() { refreshServerFlows(buildStepId, true); };
                          }
                        );
                  }
                  else {
                      callback(buildStepId, cachedServerFlows[serverId + basepath]);
                  }

                };

                window['updateFlowsSelect'] = function updateFlowsSelect(buildStepId, newValues) {

                  var flowsSelector = document.getElementById('selectedFlow' + buildStepId);

                  //remember the perviously selected flow, so that if it still exists after refresh we can reselect it
                  var previouslySelectedFlow = flowsSelector.options[flowsSelector.selectedIndex].value;

                  //leave the first "empty" option
                  while (flowsSelector.length > 1) {
                    flowsSelector.remove(1);
                  }

                  var i;

                  var previousStillExists = false;
                  for (i=0 ; i < newValues.length ; i++) {
                      var newValue = newValues[i];
                      var option = document.createElement("option");
                      option.value = newValue;
                      option.text = newValue;
                      if (newValue === previouslySelectedFlow) {
                        previousStillExists = true;
                        option.selected = true;
                      }
                      flowsSelector.add(option, null);
                  }

                  if (!previousStillExists) {
                    clearFlowParameters(buildStepId);
                  }
                };

                window['refreshServerFlows'] = function refreshServerFlows(buildStepId, force) {

                      var serverSelector = document.getElementById('ooServer' + buildStepId);
                      //don't do anything in case it's the "-- select one --" initial default value
                      if (serverSelector.selectedIndex > 0) {

                          var selectedServer = serverSelector.options[serverSelector.selectedIndex].value;

                          var basepath = document.getElementById('basepath' + buildStepId).value;

                          getFlowsForServer(buildStepId, force, selectedServer, basepath, updateFlowsSelect);
                      }
                };

                window['setBasepathError'] = function setBasepathError(buildStepId, msg) {

                    var basepathElement = document.getElementById("basepath" + buildStepId);
                    var siblings = basepathElement.parentNode.parentNode.parentNode.childNodes;
                    for (var i = 0 ; i < siblings.length ; i++) {

                        var sibling = siblings[i];

                        if (sibling.tagName === "TR"){

                            if (sibling.className.indexOf("validation-error-area") != -1) {

                                var newValue = (msg === "" ? "" : "<div class=error>" + msg + "</div>");

                                var errorContainer = sibling.childNodes[1];

                                errorContainer.innerHTML = newValue;
                                break;
                            }
                        }
                    }
                }

                //TODO all of this perhaps could've been done instead with hudson-behavior.js method registerRegexpValidator
                window['validateBasepath'] = function validateBasepath(buildStepId) {
                    return document.getElementById("basepath" + buildStepId).value.indexOf("/Library") == 0;
                }

                window['validateBasepathAndRefreshFlows'] = function validateBasepathAndRefreshFlows(buildStepId) {
                    if (validateBasepath(buildStepId)) {
                        refreshServerFlows('${buildStepAjaxId}',false);
                        setBasepathError(buildStepId, "");
                    }
                    else {
                        setBasepathError(buildStepId, "basepath must start with /Library");
                    }
                }
            }

      </script>

      ]]>


  <j:invokeStatic var="theEmptyList" className="java.util.Collections" method="emptyList"/>
  <j:set var="ooArgs" value="${instance.getArgs()}" defaultValue="${theEmptyList}"/>


  <f:entry title="Basepath" field="basepath">

    <!-- the onchange isn't too much, the function makes sure there's a server chosen and not the empty default
    so if we change a value here and no server was chosen yet - no big deal.
    if we did already choose a server then it makes sense to refresh the flows.
    -->
    <f:textbox id="basepath${buildStepAjaxId}" default="/Library" onChange="validateBasepathAndRefreshFlows('${buildStepAjaxId}')" />
  </f:entry>

  <!-- display configured oo servers to select from -->
  <f:entry title="Select HP Operations Orchestration Server" name="ooServer">
    <select class="setting-input" id="ooServer${buildStepAjaxId}" name="ooServer" onChange="refreshServerFlows('${buildStepAjaxId}',false)">

        <j:choose>
            <j:when test="${selectedServer == null}">
                <option value="" selected="true"> -- select one -- </option>
            </j:when>
            <j:otherwise>
                <option value=""> -- select one -- </option>
            </j:otherwise>
        </j:choose>

        <j:forEach var="serverName" items="${servers}">

        <j:invokeStatic var="server" className="com.hp.mercury.ci.jenkins.plugins.oo.core.OOAccessibilityLayer" method="getOOServer">
            <j:arg value="${serverName}" type="java.lang.String"/>
          </j:invokeStatic>

            <j:choose>
                <j:when test="${server.getUniqueLabel().equals(selectedServer.getUniqueLabel())}">
                    <option value="${server.getUniqueLabel()}" selected="true">${server.getUniqueLabel()}</option>
                </j:when>
                <j:otherwise>
                    <option value="${server.getUniqueLabel()}">${server.getUniqueLabel()}</option>
                </j:otherwise>
            </j:choose>
        </j:forEach>
    </select>
  </f:entry>


  <j:set var="selectedFlow" value="${instance.getOOFlow()}" defaultValue="${null}"/>

  <f:entry title="Select Flow to Execute on Server">
    <select class="setting-input " id="selectedFlow${buildStepAjaxId}" name="selectedFlow" onChange="clearFlowParameters('${buildStepAjaxId}');">

        <option value=""> -- select one -- </option>

        <j:if test="${selectedFlow != null}">
            <option value="${selectedFlow.getId()}" selected="true">${selectedFlow.getId()}</option>
        </j:if>

    </select>
    <td><a id="refreshButton${buildStepAjaxId}" onClick="refreshServerFlows('${buildStepAjaxId}',true);"><img alt="title" src="${app.getRootUrl()}plugin/hp-operations-orchestration-automation-execution-plugin/images/refresh.png"/></a></td>
  </f:entry>

  <f:entry title="Set Parameter Values for Flow on Server" >
    <div id="argsContainer${buildStepAjaxId}">
        <f:repeatable var="arg" name="args" items="${ooArgs}" minimum="${ooArgs.size()}">
        <table width="100%">

            <j:set var="argName" value="${arg.getName()}" defaultValue=""/>
            <f:entry title="Name" field="name">
                <f:textbox value="${argName}"/>
            </f:entry>

            <j:set var="argValue" value="${arg.getValue()}" defaultValue=""/>
            <f:entry title="Value" field="value">
                <f:textbox value="${argValue}"/>
            </f:entry>

            <f:entry title="">
                <div align="right">
                  <f:repeatableDeleteButton value="Delete"/>
                </div>
            </f:entry>
        </table>
        </f:repeatable>
    </div>
    <script type="text/javascript">
        function hideshow() {
            var showhide=document.getElementById('text');
            if(showhide.style.visibility=="hidden")
            {
                showhide.style.visibility="visible";
            }
            else{
                showhide.style.visibility="hidden";
            }
        }
    </script>


    <div id="abc" align="right">
         <f:Button value="Delete"/>
    </div>

  </f:entry>

    <tr>
        <td class="setting-leftspace"><st:nbsp/></td>
        <td class="setting-name" colspan="3">
        <input name="changeBuildResult" checked="${instance.getChangeBuildResult()}" type="checkbox"
        onClick="setVisible('ooStepResult${buildStepAjaxId}', this.checked)"/>
        Change Build Result Status...
    </td>
    </tr>



    <j:invokeStatic var="matchStrategies" className="com.hp.mercury.ci.jenkins.plugins.oo.matcher.MatchStrategy" method="getMatchStrategies"/>

    <!--TODO this same function exists in conditional-trigger - unify in jenkins-commons-->
    <j:invokeStatic
          var="possibleResultStates"
          className="com.hp.mercury.ci.jenkins.plugins.OOBuildStep"
          method="possibleResults"/>
   <tr>
       <td class="setting-leftspace"><st:nbsp/></td>
   <td class="setting-name" colspan="3">
    <div id="ooStepResult${buildStepAjaxId}" style="visibility:${instance.getChangeBuildResult() ? 'visible;' : 'hidden;'}">

            if the returned variable

            <input type="text" name="retVariableToCheck"
                value="${instance.getRetVariableToCheck() != null ? instance.getRetVariableToCheck() : 'flowResponse' }"/>

            <select name="comparisonOrdinal">
                <j:forEach var="matchStrategy" varStatus="loop" items="${matchStrategies}">

                    <j:choose>
                        <j:when test="${instance.getMatchStrategy().ordinal().equals(loop.index)}">
                            <option selected="selected" value="${loop.index}">${matchStrategy}</option>
                        </j:when>
                        <j:otherwise>
                            <option value="${loop.index}">${matchStrategy}</option>
                        </j:otherwise>
                    </j:choose>

                </j:forEach>
            </select>

            the value

            <input type="text" name="valueToCompareWith"
                value="${instance.getValueToCompareWith() != null ? instance.getValueToCompareWith() : 'failure'}"/>

            then mark this build as

            <select name="desiredResultType">
                <j:forEach var="resultType" items="${possibleResultStates}">
                    <j:choose>

                        <j:when test="${instance.getDesiredResultType() != null}">
                            <j:choose>
                                <j:when test="${instance.getDesiredResultType().toString().equals(resultType)}">
                                    <option selected="selected" value="${resultType}">${resultType}</option>
                                </j:when>
                                <j:otherwise>
                                    <option value="${resultType}">${resultType}</option>
                                </j:otherwise>
                            </j:choose>
                        </j:when>

                        <j:otherwise>
                            <j:choose>
                                <j:when test="${resultType.equals(&quot;UNSTABLE&quot;)}">
                                    <option selected="selected" value="${resultType}">${resultType}</option>
                                </j:when>
                                <j:otherwise>
                                    <option value="${resultType}">${resultType}</option>
                                </j:otherwise>
                            </j:choose>
                        </j:otherwise>

                    </j:choose>
                </j:forEach>
            </select>

    </div>
    </td></tr>

</j:jelly>



